/**
 * Onfido API
 * The Onfido API is used to submit background checking requests
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/Error', 'models/Applicant', 'models/Check', 'models/CheckCreationRequest', 'models/Document', 'models/Report', 'models/ReportTypeGroup', 'models/ApplicantsList', 'models/ChecksList', 'models/DocumentsList', 'models/ReportTypeGroupsList', 'models/ReportsList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../models/Error'), require('../models/Applicant'), require('../models/Check'), require('../models/CheckCreationRequest'), require('../models/Document'), require('../models/Report'), require('../models/ReportTypeGroup'), require('../models/ApplicantsList'), require('../models/ChecksList'), require('../models/DocumentsList'), require('../models/ReportTypeGroupsList'), require('../models/ReportsList'));
  } else {
    // Browser globals (root is window)
    if (!root.Onfido) {
      root.Onfido = {};
    }
    root.Onfido.DefaultApi = factory(root.Onfido.ApiClient, root.Onfido.Error, root.Onfido.Applicant, root.Onfido.Check, root.Onfido.CheckCreationRequest, root.Onfido.Document, root.Onfido.Report, root.Onfido.ReportTypeGroup, root.Onfido.ApplicantsList, root.Onfido.ChecksList, root.Onfido.DocumentsList, root.Onfido.ReportTypeGroupsList, root.Onfido.ReportsList);
  }
}(this, function(ApiClient, Error, Applicant, Check, CheckCreationRequest, Document, Report, ReportTypeGroup, ApplicantsList, ChecksList, DocumentsList, ReportTypeGroupsList, ReportsList) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelReport operation.
     * @callback module:api/DefaultApi~cancelReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is for cancelling individual paused reports.
     * @param {String} checkId 
     * @param {String} reportId 
     * @param {module:api/DefaultApi~cancelReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cancelReport = function(checkId, reportId, callback) {
      var postBody = null;

      // verify the required parameter 'checkId' is set
      if (checkId == undefined || checkId == null) {
        throw new Error("Missing the required parameter 'checkId' when calling cancelReport");
      }

      // verify the required parameter 'reportId' is set
      if (reportId == undefined || reportId == null) {
        throw new Error("Missing the required parameter 'reportId' when calling cancelReport");
      }


      var pathParams = {
        'check_id': checkId,
        'report_id': reportId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/checks/{check_id}/reports/{report_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createApplicant operation.
     * @callback module:api/DefaultApi~createApplicantCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Applicant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Applicant
     * @param {Object} opts Optional parameters
     * @param {module:models/Applicant} opts.data 
     * @param {module:api/DefaultApi~createApplicantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Applicant}
     */
    this.createApplicant = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Applicant;

      return this.apiClient.callApi(
        '/applicants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCheck operation.
     * @callback module:api/DefaultApi~createCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Check} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a check
     * @param {String} applicantId 
     * @param {Object} opts Optional parameters
     * @param {module:models/CheckCreationRequest} opts.data 
     * @param {module:api/DefaultApi~createCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Check}
     */
    this.createCheck = function(applicantId, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling createCheck");
      }


      var pathParams = {
        'applicant_id': applicantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Check;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/checks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyApplicant operation.
     * @callback module:api/DefaultApi~destroyApplicantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Applicant
     * @param {String} applicantId 
     * @param {module:api/DefaultApi~destroyApplicantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.destroyApplicant = function(applicantId, callback) {
      var postBody = null;

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling destroyApplicant");
      }


      var pathParams = {
        'applicant_id': applicantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDocument operation.
     * @callback module:api/DefaultApi~downloadDocumentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a documents raw data
     * @param {String} applicantId 
     * @param {String} documentId 
     * @param {module:api/DefaultApi~downloadDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.downloadDocument = function(applicantId, documentId, callback) {
      var postBody = null;

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling downloadDocument");
      }

      // verify the required parameter 'documentId' is set
      if (documentId == undefined || documentId == null) {
        throw new Error("Missing the required parameter 'documentId' when calling downloadDocument");
      }


      var pathParams = {
        'applicant_id': applicantId,
        'document_id': documentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['image/png', 'image/jpeg', 'applicant/pdf'];
      var returnType = File;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/documents/{document_id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findApplicant operation.
     * @callback module:api/DefaultApi~findApplicantCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Applicant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Applicant
     * @param {String} applicantId 
     * @param {module:api/DefaultApi~findApplicantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Applicant}
     */
    this.findApplicant = function(applicantId, callback) {
      var postBody = null;

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling findApplicant");
      }


      var pathParams = {
        'applicant_id': applicantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Applicant;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findCheck operation.
     * @callback module:api/DefaultApi~findCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Check} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Check
     * @param {String} applicantId 
     * @param {String} checkId 
     * @param {module:api/DefaultApi~findCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Check}
     */
    this.findCheck = function(applicantId, checkId, callback) {
      var postBody = null;

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling findCheck");
      }

      // verify the required parameter 'checkId' is set
      if (checkId == undefined || checkId == null) {
        throw new Error("Missing the required parameter 'checkId' when calling findCheck");
      }


      var pathParams = {
        'applicant_id': applicantId,
        'check_id': checkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Check;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/checks/{check_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findDocument operation.
     * @callback module:api/DefaultApi~findDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A single document can be retrieved by calling this endpoint with the document’s unique identifier.
     * @param {String} applicantId 
     * @param {String} documentId 
     * @param {module:api/DefaultApi~findDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Document}
     */
    this.findDocument = function(applicantId, documentId, callback) {
      var postBody = null;

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling findDocument");
      }

      // verify the required parameter 'documentId' is set
      if (documentId == undefined || documentId == null) {
        throw new Error("Missing the required parameter 'documentId' when calling findDocument");
      }


      var pathParams = {
        'applicant_id': applicantId,
        'document_id': documentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Document;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/documents/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findReport operation.
     * @callback module:api/DefaultApi~findReportCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A single report can be retrieved using this endpoint with the corresponding unique identifier.
     * @param {String} checkId 
     * @param {String} reportId 
     * @param {module:api/DefaultApi~findReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Report}
     */
    this.findReport = function(checkId, reportId, callback) {
      var postBody = null;

      // verify the required parameter 'checkId' is set
      if (checkId == undefined || checkId == null) {
        throw new Error("Missing the required parameter 'checkId' when calling findReport");
      }

      // verify the required parameter 'reportId' is set
      if (reportId == undefined || reportId == null) {
        throw new Error("Missing the required parameter 'reportId' when calling findReport");
      }


      var pathParams = {
        'check_id': checkId,
        'report_id': reportId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Report;

      return this.apiClient.callApi(
        '/checks/{check_id}/reports/{report_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findReportTypeGroup operation.
     * @callback module:api/DefaultApi~findReportTypeGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ReportTypeGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve single report type group object
     * @param {String} reportTypeGroupId 
     * @param {module:api/DefaultApi~findReportTypeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ReportTypeGroup}
     */
    this.findReportTypeGroup = function(reportTypeGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'reportTypeGroupId' is set
      if (reportTypeGroupId == undefined || reportTypeGroupId == null) {
        throw new Error("Missing the required parameter 'reportTypeGroupId' when calling findReportTypeGroup");
      }


      var pathParams = {
        'report_type_group_id': reportTypeGroupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportTypeGroup;

      return this.apiClient.callApi(
        '/report_type_groups/{report_type_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicants operation.
     * @callback module:api/DefaultApi~listApplicantsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ApplicantsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Applicants
     * @param {module:api/DefaultApi~listApplicantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ApplicantsList}
     */
    this.listApplicants = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicantsList;

      return this.apiClient.callApi(
        '/applicants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listChecks operation.
     * @callback module:api/DefaultApi~listChecksCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ChecksList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Checks
     * @param {String} applicantId 
     * @param {module:api/DefaultApi~listChecksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ChecksList}
     */
    this.listChecks = function(applicantId, callback) {
      var postBody = null;

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling listChecks");
      }


      var pathParams = {
        'applicant_id': applicantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ChecksList;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/checks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listDocuments operation.
     * @callback module:api/DefaultApi~listDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/DocumentsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List documents
     * All documents belonging to an applicant can be listed from this endpoint
     * @param {String} applicantId 
     * @param {module:api/DefaultApi~listDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/DocumentsList}
     */
    this.listDocuments = function(applicantId, callback) {
      var postBody = null;

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling listDocuments");
      }


      var pathParams = {
        'applicant_id': applicantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DocumentsList;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listReportTypeGroups operation.
     * @callback module:api/DefaultApi~listReportTypeGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ReportTypeGroupsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all report type groups
     * @param {module:api/DefaultApi~listReportTypeGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ReportTypeGroupsList}
     */
    this.listReportTypeGroups = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportTypeGroupsList;

      return this.apiClient.callApi(
        '/report_type_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listReports operation.
     * @callback module:api/DefaultApi~listReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ReportsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All the reports belonging to a particular check can be listed from this endpoint.
     * @param {String} checkId 
     * @param {module:api/DefaultApi~listReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ReportsList}
     */
    this.listReports = function(checkId, callback) {
      var postBody = null;

      // verify the required parameter 'checkId' is set
      if (checkId == undefined || checkId == null) {
        throw new Error("Missing the required parameter 'checkId' when calling listReports");
      }


      var pathParams = {
        'check_id': checkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportsList;

      return this.apiClient.callApi(
        '/checks/{check_id}/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeCheck operation.
     * @callback module:api/DefaultApi~resumeCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume a Check
     * @param {String} checkId 
     * @param {module:api/DefaultApi~resumeCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resumeCheck = function(checkId, callback) {
      var postBody = null;

      // verify the required parameter 'checkId' is set
      if (checkId == undefined || checkId == null) {
        throw new Error("Missing the required parameter 'checkId' when calling resumeCheck");
      }


      var pathParams = {
        'check_id': checkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/checks/{check_id}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeReport operation.
     * @callback module:api/DefaultApi~resumeReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is for resuming individual paused reports.
     * @param {String} checkId 
     * @param {String} reportId 
     * @param {module:api/DefaultApi~resumeReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resumeReport = function(checkId, reportId, callback) {
      var postBody = null;

      // verify the required parameter 'checkId' is set
      if (checkId == undefined || checkId == null) {
        throw new Error("Missing the required parameter 'checkId' when calling resumeReport");
      }

      // verify the required parameter 'reportId' is set
      if (reportId == undefined || reportId == null) {
        throw new Error("Missing the required parameter 'reportId' when calling resumeReport");
      }


      var pathParams = {
        'check_id': checkId,
        'report_id': reportId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/checks/{check_id}/reports/{report_id}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplicant operation.
     * @callback module:api/DefaultApi~updateApplicantCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Applicant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Applicant
     * @param {String} applicantId 
     * @param {Object} opts Optional parameters
     * @param {module:models/Applicant} opts.data 
     * @param {module:api/DefaultApi~updateApplicantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Applicant}
     */
    this.updateApplicant = function(applicantId, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling updateApplicant");
      }


      var pathParams = {
        'applicant_id': applicantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Applicant;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDocument operation.
     * @callback module:api/DefaultApi~uploadDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a document
     * Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB. 
     * @param {String} applicantId 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {String} opts.side 
     * @param {File} opts.file 
     * @param {module:api/DefaultApi~uploadDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Document}
     */
    this.uploadDocument = function(applicantId, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicantId' is set
      if (applicantId == undefined || applicantId == null) {
        throw new Error("Missing the required parameter 'applicantId' when calling uploadDocument");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling uploadDocument");
      }


      var pathParams = {
        'applicant_id': applicantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'type': type,
        'side': opts['side'],
        'file': opts['file']
      };

      var authNames = ['Token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Document;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
